<script>

var debuggerOn = false,
	isThreedReady = false,
	isAPIReady = false,
	isAPIError = false,
	isNewAPI = true,
	shaParam = '',
	showScrolledHero = false,
	convertCamryHalfYear = true,
	regionValue,
	apiInit,
	threedInit,
	sessionTime,
	timetoInteract,
	pickTimerStart,
	gradeFacetCount = true;

    // Immediately redirect on take-down vehicles.
    redirectTackeDownSeries(getSeriesFromHash());

if (/\?/.test(window.location.href) && urlParam('debug') === 'true') {
	debuggerOn = true;

	// Cross Browser consol error catching
	if (!window.console){
		window.console = {
			log: function(){}
		};
	}
	if (!console.time){
		console.time = function(){};
	}
	if (!console.timeEnd){
		console.timeEnd = function(){};
	}
	if (!console.debug){
		console.debug = function(){};
	}
	if (!console.info){
		console.info = function(){};
	}
	if (!console.warn){
		console.warn = function(){};
	}
	if (!console.error){
		console.error = function(){};
	}

	console.log("Debugger is on.");
	if (console && console.time){
		console.time('API INIT');
		console.time('THREED INIT');
		console.time('SESSION TIME');
	}
	apiInit = new Date().valueOf();
	threedInit =  new Date().valueOf();
	sessionTime =  new Date().valueOf();
	timetoInteract = new Date().valueOf();
}

if (/\?/.test(window.location.href) && urlParam('gradeCount')) {
	gradeFacetCount = false;
}

if (/\?/.test(window.location.href) && urlParam('region')) {
	regionValue = urlParam('region')
}

if (/\?/.test(window.location.href) && urlParam('sha')) {
	shaParam = urlParam('sha');
}

function urlParam(name){
	var results = new RegExp('[\\?&]' + name + '=([^&#]*)').exec(window.location.href);
	if (!results) { return 0; }
	return results[1] || 0;
}

function getSeriesFromHash() {
	// The series code is at the 3 index of hash params.
	// ie. search-inventory/#!/results/2015/camry
	// Index                0. 1.      2.   3.

	return window.location.hash.split('/')[3];
}

/**
 * jQuery inArray implementation.  Since jQuery is not available at this high in
 * the page, the trade off was to inlcude a method instead of letting the libs
 * and app code initialize.
 * @param  {String} elem  The string in question.
 * @param  {Array} array  The list in which to look into.
 * @param  {Number} i     The start index.
 * @return {Boolean}      Whether of string was found in the array.
 */
function inArray(elem, array, i) {
    var len;
    if ( array ) {
        if ( array.indexOf ) {
            return array.indexOf.call( array, elem, i );
        }
        len = array.length;
        i = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;
        for ( ; i < len; i++ ) {
            // Skip accessing in sparse arrays
            if ( i in array && array[ i ] === elem ) {
                return i;
            }
        }
    }
    return -1;
}

function isEspanol() {
	return /\/espanol/.test(window.location.href);
}

/**
 * Identifies and redirects users from various "take-down" vehicles to their
 * respective MLP pages which have been updated to the "discontinued" page.
 * We are handling it in the UI because vhosts are not able to read beyond the
 * #! mark, which is where the series code is located.
 * 
 * The code will do a "document.location.href" to initiate navigation of the
 * page which will ensure no app code runs after redirection.
 * @author Bobby Berberyan
 * @param {Array} blackList The list of take-down vehicles.  When new vehicles
 * need to be taken down, simply add to the blacklist.
 * @augments {Object}
 * @public
 */
function redirectTackeDownSeries(series) {
    var blackList = [
            // 'priusplugin',
            'venza'
        ];

    // Don't do anything if the series is undefined, possibly loading the
    // landing page.
    if (!series) {return;}

    // If the take-down vehicle has been identified.
    if (inArray(series, blackList) > -1) {
        window.location.href = '/' + series + '/' + (isEspanol() ? '?espanolcontent=false' : '');
        return false;
    }
}
</script>